@startuml

package HttpRequest{
interface VolleyCallback #header:C6AD77{
  void onResponse(String result)
}
class CustomRequest #header:C6AD77{
  -url : String
  -params : Map<String, String>
  -context : Context
  -volley : VolleyCallback
  +CustomRequest(String url, Map<String, String> params, 
  Context c, VolleyCallback v)
  +void sendGetRequest()
  +void sendPostRequest()
  +void sendPatchRequest()
  +void sendDeleteRequest()
}

}

package Models {

together{
class Admin #header:C6AD77 {
    -partita_iva : String

}
class AddettoCucina #header:C6AD77 {
    -numeroOrdiniEvasi : int    

}
 
  abstract class Lavoratore #header:C6AD77{
    -codiceFiscale : String
    -nome : String
    -cognome : String
    -email : String
    -hashedPassword : String
    -ruolo : String
  }

  class Cameriere #header:C6AD77 {
  }

  class Supervisore #header:C6AD77 {
}
}

class Ordine #header:C6AD77{

    - idOrdine : Long
    - numeroTavolo : int
    - evaso : boolean
    - evasoDa : String
    - piattiOrdinati : String
    - dataOrdine : String
    - sollecitato : boolean
    - conto : int
    - pagato : boolean
}
class Piatto #header:C6AD77{
    - id_menu : Long
    - nome_piatto : String
    - descrizione : String
    - allergeni : String
    - contiene : String
    - prezzo : String
    - tipo : String
    - tipoPietanza : String
    - menu : String

}


  class Ristorante #header:C6AD77{
  -codice_ristorante : Long
  -nome : String
  -coperti : int
  -locazione : String
  -numeroTelefono : String
  -avvisi : List<Avviso>
  -locTuristica : boolean

  +Ristorante(Long codRistorante, String nome, int coperti, 
  String locazione, Admin proprietario, List<Cameriere> c)
 
  }
  class Menu #header:C6AD77{
    -id_menu : Long
    -nome : String
    -tipo : String
    -lingua : String
  }

}

package Activities {

class OrderStatusActivity #header:C6AD77{
    -welcomeText : TextView
    -recycleView: RecycleView
    -handler: Handler
    -runnable : Runnable
    -delay: int
    -newAvvisiCheck: String
    -bottomNavigationView: BottomNavigationView

    #void onCreate(Bundle savedInstanceState)
    -void inizializzaComponenti()
    #void onResume()
    #void onPause()
    -void setUpOrders()
    -void checkForNewOrders()
    -void getRistoranteAddettoCucina()
    -void checkForNewAvvisi() 
    -void switchToNotificationActivity()
    +void onBackPressed() 
    +void onResponse(String result) 
}

class TakeOrderActivity #header:C6AD77{
    - newOrdine : Ordine
    - saveOrder : Button 
    - numeroTavoloSpin : Spinner
    - loading : GifImageView 
    - piattiOrdinati : ArrayList<Piatto>
    - antipasti : ArrayList<Piatto>
    - primi : ArrayList<Piatto>
    - secondi : ArrayList<Piatto>
    - contorni : ArrayList<Piatto>
    - dessert : ArrayList<Piatto>
    - pizze : ArrayList<Piatto>
    - bevande : ArrayList<Piatto>
    - frutta : ArrayList<Piatto>

    # void onCreate(Bundle savedInstanceState)
    - void inizializeComponent()
    - void setMenu()
    - CardView createMenuItem(Piatto p)
    - void save()
    + void backTransition(ArrayList<Piatto> p)
    + void drawDishes(ArrayList<Piatto> dishType, 
    LinearLayout listaMenu, int stringa)
    + void onResponse(String s)
    - void updateCameriere(String volleyResult)

}
}
package SingletonModels{
  class CameriereSingleton #header:C6AD77{
    -{static}istance : CameriereSingleton
  }

  class AddettoCucinaSingleton #header:C6AD77{
    -{static}istance : AddettoCucinaSingleton
  }

  class SupervisoreSingleton #header:C6AD77{
    -{static}istance : SupervisoreSingleton
  }
}

package NetworkManager{
class VolleySingleton #header:C6AD77{
    -{static} instance : VolleySingleton
    -requestQueue : RequestQueue 
    -imageLoader : ImageLoader
    -{static} ctx : Context

    -VolleySingleton(Context context)
    +{static} synchronized VolleySingleton getInstance(Context context)
    + <T> void addToRequestQueue(Request<T> req)
}
}
package Helper {
class ScreenSize #header:C6AD77{
    +screenWidth : screenSize
    +screenHeigth : screenSize
    +{static} void setScreenSize(Context context)
}


enum screenSize #header:C6AD77{
    SMALL
    MEDIUM
    LARGE
    XLARGE
}
ScreenSize -down- screenSize
}

package Adapter {
class OrderRecycleViewAdapter #header:C6AD77{
    -context : Context
    -ordini : ArrayList<Ordine>
    -dipendenteLoggato : Lavoratore
    +{static} MyViewHolder : class
    +OrderRecycleViewAdapter(Context context, ArrayList<Ordine>
    ordini, Lavoratore dipendente)
    +OrderRecycleViewAdapter.MyViewHolder onCreateViewHolder
    (ViewGroup parent, int viewType)
    +void onBindViewHolder
    (OrderRecycleViewAdapter.MyViewHolder holder, int position)
    +int getItemCount()
    -void setEvasoOnSpring(String idOrdine)
    -void setSollecitatoOnSpring(String idOrdine)
    +void onResponse(String result)
}
}
package "Repository"{
  class AdminController #header:C6AD77{
    +Iterable<Admin> getAllProducts()
    +String addNewAdmin(String cf, String pIva, String nome,
    String cognome, String email, String hpass)
    +Lavoratore adminLogin(String email, String hpass)
    +int setNewNome(String email, String nome)
    +Admin changeEmail(String id, String emailNew)
    +Admin changePassword(String id, String passNew)
    +String onError()
  }
  
  interface AdminRepository #header:C6AD77{
    Admin findByEmailAddress(String email)
    Admin findByPartitaIva(String pIva)
  }
  
  class AddettoCucinaController #header:C6AD77{
    +AddettoCucinaController(AddettoCucinaRepository addettoRepo, 
    RistoranteRepository ristRepo)
    +Ristorante getRistoranteCameriere(String id)
    +String changePassword(String id, String passNew)
    +String deleteMenu(String addetto_id)
  }
  
  class CameriereController #header:C6AD77{
    +CameriereController(CameriereRepository camRepo,
    RistoranteRepository ristRepo, OrdineRepository ordRepo)
    +List<Cameriere> getAllCamerieri()
    +Ristorante addNewCameriere(Long codRistorante, String cf, 
    String nome, String cognome, String email, String hpass)
    +Ristorante getRistoranteCameriere(String id)
    +String changePassword(String id, String passNew)
    +String deleteMenu(String cameriere_id)
  }
  
  class SupervisoreController #header:C6AD77{
    +SupervisoreController(SupervisoreRepository supRepo,
    CameriereRepository camRepo)
    +Ristorante getRistoranteCameriere(String id)
    +String changePassword(String id, String passNew)
    +String deleteMenu(String sup_id)
  }
  
  interface AddettoCucinaRepository #header:C6AD77{
    AddettoCucina findByEmailAddress(String email)
  }
  
  interface CameriereRepository #header:C6AD77{
    Cameriere findByEmailAddress(String email)
  }
  
  interface SupervisoreRepository #header:C6AD77{
    Supervisore findByEmailAddress(String email)
  }
  
  interface RistoranteRepository #header:C6AD77{
  }
  
  interface OrdineRepository #header:C6AD77{
  }
}


'associazioni
AddettoCucina "1" -down- "1" Ristorante
Ordine - Cameriere
Piatto - Ordine
Cameriere - Ristorante
Menu - Piatto
Admin "1" -up- "1..*" Ristorante
Ristorante -up- Menu

Admin -down-> Lavoratore
Supervisore -down-> Lavoratore
Cameriere -down-> Lavoratore
AddettoCucina -down-> Lavoratore

AddettoCucina -up- AddettoCucinaSingleton
Cameriere -up- CameriereSingleton
Supervisore -up- SupervisoreSingleton

OrderStatusActivity -down- AddettoCucinaSingleton
OrderStatusActivity -down- CameriereSingleton
OrderStatusActivity -down- SupervisoreSingleton


OrderStatusActivity ..|> VolleyCallback
TakeOrderActivity ..|> VolleyCallback

TakeOrderActivity -up- Ordine
TakeOrderActivity -- Piatto
OrderStatusActivity -down Ordine
OrderStatusActivity -up- OrderRecycleViewAdapter 

VolleyCallback - CustomRequest
CustomRequest -up- VolleySingleton

TakeOrderActivity -down- ScreenSize


'CustomRequest-Repository
CustomRequest -- AdminController
CustomRequest -- CameriereController
CustomRequest -- SupervisoreController
CustomRequest -- AddettoCucinaController

'AdminController
AdminController -- AdminRepository
AdminController -- CameriereRepository
AdminController -- SupervisoreRepository
AdminController -- AddettoCucinaRepository
AdminController -- Admin
AdminController -- Cameriere
AdminController -- Supervisore
AdminController -- AddettoCucina

'CameriereController
CameriereController -- CameriereRepository
CameriereController -- RistoranteRepository
CameriereController -- OrdineRepository
CameriereController -- Ristorante
CameriereController -- Cameriere

'SupervisoreController
SupervisoreController -down- SupervisoreRepository
SupervisoreController -- CameriereRepository
SupervisoreController -- Ristorante
SupervisoreController -- Supervisore

'Model-Repository
AddettoCucinaRepository --- AddettoCucina
AdminRepository --- Admin
CameriereRepository --- Cameriere
SupervisoreRepository --- Supervisore
@enduml
